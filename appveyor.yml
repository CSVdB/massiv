version: 1.0.{build}
image: Visual Studio 2015

build: off

environment:
  global:
    # Avoid long paths on Windows
    STACK_ROOT: "c:\\s"
    STACK_WORK: ".w"
    CACHE_DIR: "c:\\c"
    WORK_DIR: "c:\\w"

init:
  - SET BRANCH_CACHE_DIR=%CACHE_DIR%\%APPVEYOR_REPO_BRANCH:/=_%
  - SET CACHED_STACK_ROOT=%BRANCH_CACHE_DIR%\sr
  - SET CACHED_STACK_WORK=%BRANCH_CACHE_DIR%\sw

cache:
  # TODO: https://github.com/commercialhaskell/stack/issues/1176#issuecomment-269520803

  # Appveyor's cache is shared across all branch/PR builds for this project, so
  # dependency/version differences can corrupt the cache. To fix that, we store
  # copies of %STACK_ROOT% and .stack-work in the cache namespaced by branch,
  # but only from branch builds. PR builds, which could make arbitrary changes
  # to the dependency closure, are not allowed to update the cache; however,
  # they get read access to the cache.

  # Another quirk of Appveyor's cache is any cache directory not listed here
  # gets deleted at the end of the build. The hardcoded branch directories will
  # be preserved, even when building a branch which isn't listed. Managing
  # hardcoded branches is necessary because there's an upper limit on supported
  # cache size of any single cache directory. Branches which don't appear
  # explicitly here are optimistically cached for consecutive builds on the same
  # branch; however, their cache directories will be deleted whenever a
  # different branch is built.
  - "%BRANCH_CACHE_DIR%"        # e.g. C:\cache\feature_abc123
  - "%CACHE_DIR%\\master"
  # Add more "%CACHE_DIR%\\<branch_name>" directories as needed

before_test:
# Avoid long paths not to each MAX_PATH of 260 chars
- xcopy /q /s /e /r /k /i /v /h /y C:\projects\massiv\massiv "%WORK_DIR%"
- cd "%WORK_DIR%"
# Setup cache dirs
- IF NOT EXIST %CACHE_DIR% mkdir %CACHE_DIR%
- IF NOT EXIST %BRANCH_CACHE_DIR% mkdir %BRANCH_CACHE_DIR%
- IF NOT EXIST %CACHED_STACK_ROOT% mkdir %CACHED_STACK_ROOT%
- IF NOT EXIST %CACHED_STACK_WORK% mkdir %CACHED_STACK_WORK%
- Echo %APPVEYOR_BUILD_VERSION% > build-id
- xcopy /q /s /e /r /k /i /v /h /y %CACHED_STACK_ROOT% %STACK_ROOT%
- xcopy /q /s /e /r /k /i /v /h /y %CACHED_STACK_WORK% %STACK_WORK%
# Debug paths
- Echo WORK_DIR = %WORK_DIR%
- dir %WORK_DIR%
- Echo CACHE_DIR = %CACHE_DIR%
- dir %CACHE_DIR%
- Echo BRANCH_CACHE_DIR = %BRANCH_CACHE_DIR%
- dir %BRANCH_CACHE_DIR%
- Echo CACHED_STACK_ROOT = %CACHED_STACK_ROOT%
- dir %CACHED_STACK_ROOT%
- Echo CACHED_STACK_WORK = %CACHED_STACK_WORK%
- dir %CACHED_STACK_WORK%


# Install stack
- ps: Start-FileDownload http://www.stackage.org/stack/windows-x86_64 -FileName stack.zip
- 7z x stack.zip stack.exe

test_script:
  - cd "%WORK_DIR%"
  # Install happy separately: https://github.com/commercialhaskell/stack/issues/3151#issuecomment-310642487. Also install cpphs because it's a build-tool and Stack can't figure out by itself that it should be installed
  - stack --verbosity warn setup --no-reinstall > nul
  - stack build
      -j 2
      --no-terminal
      --local-bin-path %WORK_DIR%
      --no-haddock-deps
      --work-dir %STACK_WORK%
      --extra-lib-dirs="%WORK_DIR%"
  # - stack test massiv:tests
  #     -j 2
  #     --no-terminal
  #     --local-bin-path %WORK_DIR%
  #     --test
  #     --no-haddock-deps
  #     --work-dir %STACK_WORK%
  #     --extra-include-dirs="C:\OpenSSL-Win64-v102\include"
  #     --extra-lib-dirs="C:\OpenSSL-Win64-v102"
  #     --extra-lib-dirs="%WORK_DIR%"

notifications:
  - provider: Email
    to:
      - lehins@yandex.ru
    on_build_success: false
    on_build_failure: false
    on_build_status_changed: true
